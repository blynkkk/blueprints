[
    {
        "id": "43a6f8e27a9d54a0",
        "type": "tab",
        "label": "NCD IO - 2 Contact",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a33fb0cba3ea4d7a",
        "type": "debug",
        "z": "43a6f8e27a9d54a0",
        "name": "Debug Sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 340,
        "wires": []
    },
    {
        "id": "3d7258f205457f96",
        "type": "mqtt out",
        "z": "43a6f8e27a9d54a0",
        "name": "",
        "topic": "ds/Input 2",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f5af50163054daa8",
        "x": 880,
        "y": 300,
        "wires": []
    },
    {
        "id": "553d87b47ad967f7",
        "type": "mqtt out",
        "z": "43a6f8e27a9d54a0",
        "name": "",
        "topic": "event/input_1_is_open",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f5af50163054daa8",
        "x": 1120,
        "y": 360,
        "wires": []
    },
    {
        "id": "04919268f6fc0583",
        "type": "function",
        "z": "43a6f8e27a9d54a0",
        "name": "data_process",
        "func": "// Check if the message payload is a string, and parse it if necessary\nlet parsedMsg;\nif (typeof msg.payload === 'string') {\n    parsedMsg = JSON.parse(msg.payload);\n} else {\n    parsedMsg = msg.payload;\n}\n// Extract relevant data from the parsed message payload\nlet { \n    nodeId, firmware, battery, battery_percent: batteryPercent, counter, sensor_type: sensorType,\n    sensor_data: sensorData, sensor_name: sensorName, addr: sensorAddr, type \n} = parsedMsg;\n\n// Check if the sensor type is 2 and sensorData is defined\nif (sensorType === 2 && sensorData !== undefined) {\n\n    global.set(\"input1\", sensorData?.input_1);\n    global.set(\"input2\", sensorData?.input_2);\n    node.log(\"SET\");\n\n\nreturn [\n    { payload: batteryPercent },           \n    { payload: sensorData?.input_1 },     \n    { payload: sensorData?.input_2 },\n    { payload: \"Null\" },     \n];\n}\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 280,
        "wires": [
            [
                "e08ef27a567c0f4a"
            ],
            [
                "af3f88d2902b813b"
            ],
            [
                "3d7258f205457f96"
            ],
            [
                "a178d0731d59cbe8",
                "de3ec562ed94e398"
            ]
        ]
    },
    {
        "id": "236e4f7f0457ee0f",
        "type": "mqtt out",
        "z": "43a6f8e27a9d54a0",
        "name": "",
        "topic": "event/input_2_is_open",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f5af50163054daa8",
        "x": 1120,
        "y": 420,
        "wires": []
    },
    {
        "id": "af3f88d2902b813b",
        "type": "mqtt out",
        "z": "43a6f8e27a9d54a0",
        "name": "",
        "topic": "ds/Input 1",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f5af50163054daa8",
        "x": 880,
        "y": 240,
        "wires": []
    },
    {
        "id": "c6a7ce8f540b0081",
        "type": "comment",
        "z": "43a6f8e27a9d54a0",
        "name": "NCD Sensor Node",
        "info": "",
        "x": 290,
        "y": 240,
        "wires": []
    },
    {
        "id": "38b9a84f872ee9a8",
        "type": "comment",
        "z": "43a6f8e27a9d54a0",
        "name": "Process data from sensor",
        "info": "",
        "x": 610,
        "y": 220,
        "wires": []
    },
    {
        "id": "99af84d92a27040b",
        "type": "comment",
        "z": "43a6f8e27a9d54a0",
        "name": "MQTT-OUT",
        "info": "",
        "x": 890,
        "y": 140,
        "wires": []
    },
    {
        "id": "1027ca2b5cbedb85",
        "type": "ncd-wireless-node",
        "z": "43a6f8e27a9d54a0",
        "name": "",
        "connection": "3a158777559a1790",
        "config_comm": "3a158777559a1790",
        "addr": "",
        "sensor_type": "2",
        "auto_config": true,
        "on_the_fly_enable": "",
        "node_id_delay_active": "",
        "node_id": 0,
        "delay": 300,
        "form_network": "",
        "destination_active": "",
        "destination": "0000FFFF",
        "power_active": "",
        "power": 4,
        "retries_active": "",
        "retries": 10,
        "pan_id_active": "",
        "pan_id": "7FFF",
        "change_enabled": "",
        "change_pr": "0",
        "change_interval": "0",
        "cm_calibration": "60.6",
        "bp_altitude": "0",
        "bp_pressure": "0",
        "bp_temp_prec": "0",
        "bp_press_prec": "0",
        "amgt_accel": "0",
        "amgt_mag": "0",
        "amgt_gyro": "0",
        "impact_accel_active": "",
        "impact_accel": "0",
        "impact_data_rate_active": "",
        "impact_data_rate": "4",
        "impact_threshold_active": "",
        "impact_threshold": 25,
        "impact_duration_active": "",
        "impact_duration": 1,
        "activ_interr_x": 1,
        "activ_interr_y": 2,
        "activ_interr_z": 4,
        "activ_interr_op": 8,
        "force_calibration_co2_auto_config": "",
        "force_calibration_co2": 400,
        "filtering": 0,
        "data_rate": 5,
        "time_series": 0,
        "reading_type": 1,
        "mode_80_active": "",
        "mode_80": 0,
        "measurement_mode_80_active": "",
        "measurement_mode_80": 0,
        "on_request_timeout_80_active": "",
        "on_request_timeout_80": 1,
        "sensor_boot_time_420ma_active": "",
        "sensor_boot_time_420ma": 0,
        "sensor_boot_time_78_active": "",
        "sensor_boot_time_78": 0,
        "deadband_80_active": "",
        "deadband_80": 0,
        "filter_80_active": "",
        "filter_80": 0,
        "output_data_rate_p1_81_active": "",
        "output_data_rate_p1_81": 0,
        "output_data_rate_p2_81_active": "",
        "output_data_rate_p2_81": 0,
        "sampling_duration_p1_81_active": "",
        "sampling_duration_p1_81": 0,
        "sampling_duration_p2_81_active": "",
        "sampling_duration_p2_81": 0,
        "led_alert_mode_84_active": "",
        "led_alert_mode_84": 0,
        "led_accelerometer_threshold_84_active": "",
        "led_accelerometer_threshold_84": "",
        "led_velocity_threshold_84_active": "",
        "led_velocity_threshold_84": "",
        "acceleration_interrupt_threshold_84_active": "",
        "acceleration_interrupt_threshold_84": "",
        "set_rtc_101": 0,
        "current_calibration_82": "",
        "current_calibration_82_active": false,
        "current_calibration_c1_80": 178,
        "current_calibration_c1_80_active": "",
        "current_calibration_c2_80": 178,
        "current_calibration_c2_80_active": "",
        "current_calibration_c3_80": 178,
        "current_calibration_c3_80_active": "",
        "output_data_rate_101_active": "",
        "output_data_rate_101": 0,
        "output_data_rate_101_m2_active": "",
        "output_data_rate_101_m2": 0,
        "sampling_duration_101_active": "",
        "sampling_duration_101": 1,
        "sampling_interval_101_active": "",
        "sampling_interval_101": 1,
        "full_scale_range_101_active": "",
        "full_scale_range_101": 1,
        "full_scale_range_101_m2_active": "",
        "full_scale_range_101_m2": 1,
        "x_axis_101": "",
        "y_axis_101": "",
        "z_axis_101": "",
        "low_pass_filter_80_active": "",
        "low_pass_filter_80": 0,
        "high_pass_filter_80_active": "",
        "high_pass_filter_80": 0,
        "low_pass_filter_81_p2_active": "",
        "low_pass_filter_81_p2": 0,
        "high_pass_filter_81_p2_active": "",
        "high_pass_filter_81_p2": 0,
        "roll_angle_threshold_47": 0,
        "roll_angle_threshold_47_active": "",
        "pitch_angle_threshold_47": 0,
        "pitch_angle_threshold_47_active": "",
        "counter_threshold_35": 50,
        "counter_threshold_35_active": "",
        "payload_length_80_active": "",
        "payload_length_80": 3,
        "motion_threshold_46_active": "",
        "motion_threshold_46": 100,
        "low_calibration_420ma_active": "",
        "low_calibration_420ma": 68805,
        "mid_calibration_420ma_active": "",
        "mid_calibration_420ma": 68724,
        "high_calibration_420ma_active": "",
        "high_calibration_420ma": 68714,
        "thermocouple_type_23_active": "",
        "thermocouple_type_23": 0,
        "x": 220,
        "y": 280,
        "wires": [
            [
                "a33fb0cba3ea4d7a"
            ]
        ]
    },
    {
        "id": "06aeaf9d3bcc66d1",
        "type": "ncd-gateway-node",
        "z": "43a6f8e27a9d54a0",
        "name": "",
        "connection": "3a158777559a1790",
        "unknown_devices": 0,
        "outputs": 1,
        "x": 290,
        "y": 180,
        "wires": [
            [
                "e697ab42337fd0a6",
                "04919268f6fc0583"
            ]
        ]
    },
    {
        "id": "3a7915ea764ccc59",
        "type": "comment",
        "z": "43a6f8e27a9d54a0",
        "name": "NCD Gateway Node",
        "info": "",
        "x": 290,
        "y": 140,
        "wires": []
    },
    {
        "id": "e697ab42337fd0a6",
        "type": "debug",
        "z": "43a6f8e27a9d54a0",
        "name": "Debug Gateway",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 180,
        "wires": []
    },
    {
        "id": "e08ef27a567c0f4a",
        "type": "mqtt out",
        "z": "43a6f8e27a9d54a0",
        "name": "",
        "topic": "ds/Battery",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f5af50163054daa8",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "2b898eb0b331ea83",
        "type": "mqtt in",
        "z": "43a6f8e27a9d54a0",
        "name": "",
        "topic": "downlink/ds/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "f5af50163054daa8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 340,
        "wires": [
            [
                "c50b31362d1d7f26"
            ]
        ]
    },
    {
        "id": "c50b31362d1d7f26",
        "type": "function",
        "z": "43a6f8e27a9d54a0",
        "name": "check_received_data",
        "func": "\nif (msg.topic == \"downlink/ds/Input 1 Notification\") {\n    global.set(\"input1_notification\", msg.payload)\n} else if (msg.topic == \"downlink/ds/Input 2 Notification\") {\n    global.set(\"input2_notification\", msg.payload)\n} \n\n\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 380,
        "wires": []
    },
    {
        "id": "a178d0731d59cbe8",
        "type": "function",
        "z": "43a6f8e27a9d54a0",
        "name": "check input 1",
        "func": "// Retrieve global thresholds\nlet input1_notification = global.get(\"input1_notification\") || 0;         // Default to 0 if not set\nlet input1 = global.get(\"input1\") || 0;\n\nif (input1_notification == 1 && input1 == 1) {\n    msg.payload = `Input 1 is open.`;\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 360,
        "wires": [
            [
                "553d87b47ad967f7"
            ]
        ]
    },
    {
        "id": "de3ec562ed94e398",
        "type": "function",
        "z": "43a6f8e27a9d54a0",
        "name": "check input 2",
        "func": "// Retrieve global thresholds\nlet input2_notification = global.get(\"input2_notification\") || 0;         // Default to 0 if not set\nlet input2 = global.get(\"input2\") || 0;\n\nif (input2_notification == 1 && input2 == 1) {\n    msg.payload = `Input 2 is open.`;\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 420,
        "wires": [
            [
                "236e4f7f0457ee0f"
            ]
        ]
    },
    {
        "id": "55d82e0ad13ddc96",
        "type": "inject",
        "z": "43a6f8e27a9d54a0",
        "name": "run",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 420,
        "wires": [
            [
                "a178d0731d59cbe8",
                "de3ec562ed94e398"
            ]
        ]
    },
    {
        "id": "f5af50163054daa8",
        "type": "mqtt-broker",
        "name": "Blynk.cloud.Contact.Closure",
        "broker": "blynk.cloud",
        "port": "8883",
        "tls": "7f8faaf6cd43edef",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3a158777559a1790",
        "type": "ncd-gateway-config",
        "name": "",
        "comm_type": "serial",
        "ip_address": "",
        "tcp_port": "2101",
        "port": "/dev/ttymxc2",
        "baudRate": "115200",
        "pan_id": "7FFF",
        "rssi": false
    },
    {
        "id": "7f8faaf6cd43edef",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "ISRG_Root_X1.der",
        "servername": "blynk.cloud",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]

